
Summary
-------

-- You should have JDK1.1 or JDK1.2.
-- Your PATH must contain the JDK's bin directory.
-- In Unix, type 'make' to finish installation of leJOS.
-- Add leJOS's bin directory to your PATH.
-- Set RCXTTY to your serial device (e.g. com1).
-- Download firmware using lejosfirmdl.
-- Compile using lejosc instead of javac.
-- Run programs in the RCX using lejos.
-- Run programs in the host using lejos-unix.
-- Exceptions: Use lejos -verbose. Exceptions
   are shown in the RCX as [XXXX Y], where 
   XXXX = method_signature, and 
   Y = exception_class_index MOD 10.
	     
What is leJOS?
--------------

leJOS is a tiny (~ 16 Kb) Java-based operating system
that has been ported to the following platforms:

  - Lego Mindstorms RCX, i.e. Hitachi H8300
  - Unix (for emulation of RCX programs only)

leJOS was forked out of the TinyVM project
(http://sourceforge.net/projects/tinyvm). leJOS contains
a VM for Java bytecodes, and additional software to load
and run Java programs. These are some of the features
offered by leJOS:

- Object oriented language (Java).
- Arrays.
- Recursion.
- Synchronization.
- Exceptions.
- Preemtive threads of execution.
- Well-documented API.

The above are also provided by TinyVM. But in addition
to these, leJOS also offers:

- More APIs.
- Floating point operations (doubles work like floats).
- String constants.
- Casting of 8-byte longs (but not logic or arithmetic).
- Marks references in the stack (which makes it feasible
  to implement garbage collection).

TinyVM is still around simply as a low-footprint alternative
to leJOS. TinyVM is about 6 Kb smaller in the RCX.

How do you pronounce leJOS?
---------------------------

I pronounce it like the Spanish word "lejos" (which means far).

Requirements
------------

- JDK1.1.X or JDK1.2.X, available from http://java.sun.com.
  (The JDK is used during installation, for compilation,
  and to run some tools provided with leJOS, e.g. the linker).

- leJOS is known to work on Linux and Windows. It should 
  work on other Unix systems.

Setup
-----

Environment:
  - Your PATH is assumed to point to the 
    JDK's bin directory.
  - You should also add $LEJOS_HOME/bin to
    your PATH.
  - RCXTTY must be defined to point to the
    IR device file. For example, in my Linux
    partition, it's /dev/ttyS1, which corresponds
    to COM2 under Windows.
  - TINYVMPATH can be used in addition to
    CLASSPATH to allow the linker to locate
    your class files.

Building the Tools:
  Simply go to installation directory and
  type 'make'. At this point all of the tools necessary
  to run leJOS should be available under bin.

Downloading the Firmware:
  Run the lejosfirmdl utility. When the firmware
  starts, the LCD shows the power level (a number
  in the 200s or 300s), and you should hear a 
  double beep.

Emulation
---------

You should be able to run linked programs in the 
development machine. All you need to do is use
lejos-unix instead of lejos.

In some cases it might be easier to debug
programs with the emulated VM, and you'll also 
get slightly more detailed exception information.

Limitations
-----------

Due to size constraints, some language features
have been omitted. Others just haven't been 
implemented yet. The limitations that come to 
mind are:

  - Garbage collection is not performed yet.
    (The number of objects in your program
    should be bounded).
  - Switch statements are not supported.
  - Arithmetic operations on variables of type 
    long are not supported, although you can
    cast ints to longs and vice versa.
  - Maximum array length is 255.
  - The instanceof operation will always be true  
    for interfaces. In bytecode, CHECKCAST succeeds
    on all interface classes (which is a bit unsafe).
  - The instanceof and checkcast operations are
    rejected by the linker when they are performed
    on array classes (e.g. b instanceof byte[]).
  - All threads are non-daemon threads. 
  - There are no objects of type java.lang.Class, 
    which means that the ".class" construct won't
    work. Class.forName() throws ClassNotFoundException
    at all times.
  - Most JDK APIs are unavailable.

Known Bugs
----------

  - MONITOREXIT ignores null objects (it assumes
    MONITORENTER has handled them). Furthermore, it 
    doesn't check monitor validity. Until this bug 
    is fixed (actually, at all times) all monitors should 
    be constants.

  - Initializers (static or otherwise) are not
    implicitly synchronized. This could lead to race
    conditions. 
    
  - Unknown native methods are not executed. Neither
    the linker nor the VM complain about them.

Documentation
-------------

The latest API Reference should be available at
lejos.sourceforge.net. The API Reference for this release
can be obtained with 'make javadoc'.

About the License
-----------------

We are releasing under the Mozilla Public License (see LICENSE)
for now, since Kekoa Proudfoot's librcx is under that same 
license, and leJOS is linked against -lrcx and -lfloat, which
are part of librcx. No changes have been made to those libraries, 
so they haven't been redistributed. They are only needed if you 
are planning to modify the native C source code. See docs/hacking. 

Questions/Problems
------------------

Please direct feedback to jhsolorz@yahoo.com. You can also
subscribe to the tinyvm-discussion mailing list. Look for
the "Mailing Lists" section at http://sourceforge.net/projects/tinyvm.





